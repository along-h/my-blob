import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as i,a as n,e as s,f as r}from"./app-CaxZhZIt.js";const l={},c=n("p",null,"webpack概念",-1),d=r(`<h1 id="webpack" tabindex="-1"><a class="header-anchor" href="#webpack" aria-hidden="true">#</a> webpack</h1><p>前端资源文件类型十分丰富、vue、ts、img、css、less等，但是浏览器只能加载其中一部分，所</p><h2 id="基本模块" tabindex="-1"><a class="header-anchor" href="#基本模块" aria-hidden="true">#</a> 基本模块</h2><ul><li>entry： 入口</li><li>output： 出口</li><li>mode： 根据rule匹配文件，并根据相应的loader处理文件</li><li>plugin：插件类</li><li>loader： 处理文件的函数</li></ul><h2 id="重要对象" tabindex="-1"><a class="header-anchor" href="#重要对象" aria-hidden="true">#</a> 重要对象</h2><h3 id="complier" tabindex="-1"><a class="header-anchor" href="#complier" aria-hidden="true">#</a> complier</h3><p>webpack的全局对象，上面挂载着webpack的钩子</p><h3 id="complilation" tabindex="-1"><a class="header-anchor" href="#complilation" aria-hidden="true">#</a> complilation</h3><p>当前的编译内容</p><h2 id="loader" tabindex="-1"><a class="header-anchor" href="#loader" aria-hidden="true">#</a> Loader</h2><p>实质上是一个函数</p><h2 id="plugin" tabindex="-1"><a class="header-anchor" href="#plugin" aria-hidden="true">#</a> Plugin</h2><p>实质上是一个class类，里面有个apply方法，apply方法接收complier，可以通过complier上面的一系列钩子进行处理。这些钩子本质上是通过tabpable进行实现的。</p><h2 id="webpack5特性" tabindex="-1"><a class="header-anchor" href="#webpack5特性" aria-hidden="true">#</a> webpack5特性</h2><ul><li>自动引用polyfills，配置browser，继承了preset-env，自动添加</li><li>对于确定的chunk、模块ID和导出名称新增了长期缓存的算法。这些算法在生产模式下是默认启用的。</li><li>支持tree-shaking，Webpack 4 没有分析模块的导出和引用之间的依赖关系。webpack 5 有一个新的选项 <code>optimization.innerGraph</code>，在生产模式下是默认启用的，它可以对模块中的标志进行分析，找出导出和引用之间的依赖关系。</li><li>Webpack 5 增加了对一些 CommonJs 构造的支持，允许消除未使用的 CommonJs 导出，并从 <code>require()</code> 调用中跟踪引用的导出名称。</li><li>webpack 所使用的监听已重构。它之前使用的是 <code>chokidar</code> 和原生依赖 <code>fsevents</code>（仅在 macOS 上）。现在它在只基于原生的 Node.js 中的 <code>fs</code>。这意味着在 webpack 中已经没有原生依赖了。</li></ul><h2 id="优化" tabindex="-1"><a class="header-anchor" href="#优化" aria-hidden="true">#</a> 优化</h2><h3 id="dllplugin" tabindex="-1"><a class="header-anchor" href="#dllplugin" aria-hidden="true">#</a> DllPlugin</h3><p>配置dllplugin，将不常更新的第三方库进行打包缓存，生成<code>manifest.json</code>文件后续打包时不再对这些包进行编译，直接走缓存去提高打包速度</p><h3 id="thread-loader" tabindex="-1"><a class="header-anchor" href="#thread-loader" aria-hidden="true">#</a> thread-loader</h3><p>编译js时，可以开启多个线程进行解析，从而提高打包速度</p><h3 id="minicssexarctplugin" tabindex="-1"><a class="header-anchor" href="#minicssexarctplugin" aria-hidden="true">#</a> MiniCssExarctPlugin</h3><p>会将 CSS 提取到单独的文件中，为每个包含 CSS 的 JS 文件创建一个 CSS 文件，并且支持 CSS 和 SourceMaps 的按需加载。</p><h3 id="compression-webpack-plugin" tabindex="-1"><a class="header-anchor" href="#compression-webpack-plugin" aria-hidden="true">#</a> compression-webpack-plugin</h3><p>开启Gzip，压缩文件代码（js、css、等等）需要服务器也开启gzip</p><h3 id="启动cdn" tabindex="-1"><a class="header-anchor" href="#启动cdn" aria-hidden="true">#</a> 启动CDN</h3><p>对于一些确定版本的可以采用CDN的方式，如框架vue、react、ui版本，并将其排除在打包中</p><h3 id="对文件名启用hash" tabindex="-1"><a class="header-anchor" href="#对文件名启用hash" aria-hidden="true">#</a> 对文件名启用hash</h3><p><code>fullhash</code> 、<code>chunkhash</code>、<code>contenthash</code></p><ul><li><p>fullhash：每次webpack构建时生成一个唯一的hash值，一次打包只有一个</p></li><li><p>chunkhash：根据chunk生成hash值，来源于同一个chunk，则hash值就一样，常用于入口文件的配置</p></li><li><p>contenthash：根据内容生成hash值，文件内容相同hash值就相同</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
 <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name].[fullhash].js&#39;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div>`,31);function h(p,o){return i(),e("div",null,[c,s(" more "),d])}const b=a(l,[["render",h],["__file","webpack.html.vue"]]);export{b as default};
