import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,c,o as l,a as n,e as i,f as t,b as s,d as e}from"./app-CaxZhZIt.js";const r={},u=n("p",null,"vite概念",-1),d=t(`<h1 id="vite" tabindex="-1"><a class="header-anchor" href="#vite" aria-hidden="true">#</a> Vite</h1><h2 id="特性" tabindex="-1"><a class="header-anchor" href="#特性" aria-hidden="true">#</a> 特性</h2><ul><li>开发环境冷启动，无需打包（比webpack快的原因）</li><li>利用ESM和浏览器缓存技术，优化了HMR，使其更新速度与项目复杂度无关，只会请求当前模块下的资源</li><li>配置较webpack简单</li></ul><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h2><h3 id="开发环境" tabindex="-1"><a class="header-anchor" href="#开发环境" aria-hidden="true">#</a> 开发环境</h3><p>​ <code>Vite</code>相比于<code>Webpack</code>而言，没有打包的过程，而是直接启动了一个开发服务器devServer。<code>Vite</code>劫持浏览器的<code>HTTP</code>请求，在后端进行相应的处理将项目中使用的文件通过简单的分解与整合，然后再返回给浏览器(整个过程没有对文件进行打包编译)。所以编译速度很快。</p><p>​ 使用<code>esbuild</code>对依赖进行预构建，将<code>CommonJS</code>和<code>UMD</code>发布的依赖转换为浏览器支持的<code>ESM</code>，并且会将依赖缓存至<code>node_modules/.vite/dep</code>下，后续直接引用，会根据<code>packages.json</code>的的<code>dependencies</code>列表、包管理器的<code>lockfile</code>、可能在<code>vite.config.js</code>相关字段中配置过的。只要三者之一发生改变，才会重新预构建。</p><p>同时利用浏览器的缓存技术，解析后的依赖请求以http头的<code>max-age=31536000,immutable</code>进行强缓存，以提高性能</p><h4 id="_1-依赖处理" tabindex="-1"><a class="header-anchor" href="#_1-依赖处理" aria-hidden="true">#</a> 1. 依赖处理</h4><h5 id="_1-1-依赖预构建" tabindex="-1"><a class="header-anchor" href="#_1-1-依赖预构建" aria-hidden="true">#</a> 1.1 依赖预构建</h5><p>​ 依赖预构建主要有两个目的：</p><ul><li><strong>CommonJS 和 UMD 兼容性:</strong> 开发阶段中，Vite 的开发服务器将所有代码视为原生 ES 模块。因此，Vite 必须先将作为 CommonJS 或 UMD 发布的依赖项转换为 ESM。</li><li><strong>性能：</strong> Vite 将有许多内部模块的 ESM 依赖关系转换为单个模块，以提高后续页面加载性能。</li></ul><h5 id="_1-2-静态资源加载" tabindex="-1"><a class="header-anchor" href="#_1-2-静态资源加载" aria-hidden="true">#</a> 1.2 静态资源加载</h5><p>​ 当请求的路径符合 imageRE, mediaRE, fontsRE 或 JSON 格式，会被认为是一个静态资源。静态资源将处理成ESM模块返回。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/node/utils/pathUtils.ts</span>
<span class="token keyword">const</span> imageRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpe?g|gif|svg|ico|webp)(\\?.*)?$</span><span class="token regex-delimiter">/</span></span>
<span class="token keyword">const</span> mediaRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$</span><span class="token regex-delimiter">/</span></span>
<span class="token keyword">const</span> fontsRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(woff2?|eot|ttf|otf)(\\?.*)?$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isStaticAsset</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">file</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> imageRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">||</span> mediaRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">||</span> fontsRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// src/node/server/serverPluginAssets.ts</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isStaticAsset</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isImportRequest</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ctx<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;js&#39;</span>
    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token keyword">export</span> <span class="token keyword">default</span> $<span class="token punctuation">{</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment">// 输出是path</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token literal-property property">jsonPlugin</span><span class="token operator">:</span> <span class="token function-variable function">ServerPlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> app <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// handle .json imports</span>
    <span class="token comment">// note ctx.body could be null if upstream set status to 304</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.json&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isImportRequest</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ctx<span class="token punctuation">.</span>body<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ctx<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;js&#39;</span>
      ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token function">dataToEsm</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">readBody</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">namedExports</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">preferConst</span><span class="token operator">:</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-3-vue处理" tabindex="-1"><a class="header-anchor" href="#_1-3-vue处理" aria-hidden="true">#</a> 1.3 <strong>vue</strong>处理</h5><p>当 Vite 遇到一个 .vue 后缀的文件时。由于 .vue 模板文件的特殊性，它被拆分成 template, css, script 模块三个模块进行分别处理。最后会对 script, template, css 发送多个请求获取</p><h5 id="_1-4-js-ts处理" tabindex="-1"><a class="header-anchor" href="#_1-4-js-ts处理" aria-hidden="true">#</a> 1.4 <strong>js/ts处理</strong></h5><p>Vite使用esbuild将ts转译到js，约是tsc速度的20～30倍，将ts转换成js后，浏览器便可以利用ESM直接拿到js资源。</p><h4 id="_2-热更新原理" tabindex="-1"><a class="header-anchor" href="#_2-热更新原理" aria-hidden="true">#</a> 2. 热更新原理</h4><p>​ 其实就是在客户端与服务端建立了一个 websocket 连接，当代码被修改时，服务端发送消息通知客户端去请求修改模块的代码，完成热更新。</p><ul><li>服务端：服务端做的就是监听代码文件的改变，在合适的时机向客户端发送 websocket 信息通知客户端去请求新的模块代码。</li><li>客户端：Vite 中客户端的 websocket 相关代码在处理 html 中时被写入代码中。可以看到在处理 html 时，vite/client 的相关代码已经被插入。</li></ul><p>​ 在 <code>Vite\`\` dev server</code> 启动之前，<code>Vite</code> 会为 <code>HMR</code> 做一些准备工作：比如创建<code>websocket</code>服务，利用<code>chokidar</code>创建一个监听对象 <code>watcher</code> 用于对文件修改进行监听等等</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 源码位置：packages/vite/src/node/server/index.ts</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createServer</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">inlineConfig</span><span class="token operator">:</span> InlineConfig <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span>ViteDevServer<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token punctuation">.</span>
  <span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token function">createWebSocketServer</span><span class="token punctuation">(</span>httpServer<span class="token punctuation">,</span> config<span class="token punctuation">,</span> httpsOptions<span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> ignored <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span>watchOptions <span class="token punctuation">}</span> <span class="token operator">=</span> serverConfig<span class="token punctuation">.</span>watch <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">const</span> watcher <span class="token operator">=</span> chokidar<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">ignored</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&#39;**/node_modules/**&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;**/.git/**&#39;</span><span class="token punctuation">,</span>
      <span class="token operator">...</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>ignored<span class="token punctuation">)</span> <span class="token operator">?</span> ignored <span class="token operator">:</span> <span class="token punctuation">[</span>ignored<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">ignoreInitial</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">ignorePermissionErrors</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">disableGlobbing</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>watchOptions
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> FSWatcher
  <span class="token operator">...</span><span class="token punctuation">.</span>
  watcher<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  watcher<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;add&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  watcher<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;unlink&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token operator">...</span>
  <span class="token keyword">return</span> server
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ <code>createWebSocketServer</code>这个方法主是创建<code>WebSocket</code>服务并对错误进行一些处理，最后返回封装好的<code>on</code>、<code>off</code>、 <code>send</code> 和 <code>close</code> 方法，用于后续服务端推送消息和关闭服务。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 源码位置：packages/vite/src/node/server/ws.ts</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createWebSocketServer</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">server</span><span class="token operator">:</span> Server <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">config</span><span class="token operator">:</span> ResolvedConfig<span class="token punctuation">,</span>
  httpsOptions<span class="token operator">?</span><span class="token operator">:</span> HttpsServerOptions</span>
<span class="token punctuation">)</span><span class="token operator">:</span> WebSocketServer <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token literal-property property">wss</span><span class="token operator">:</span> WebSocket
  <span class="token keyword">let</span> <span class="token literal-property property">httpsServer</span><span class="token operator">:</span> Server <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>
  <span class="token comment">// 热更新配置</span>
  <span class="token keyword">const</span> hmr <span class="token operator">=</span> <span class="token function">isObject</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>server<span class="token punctuation">.</span>hmr<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>server<span class="token punctuation">.</span>hmr
  <span class="token keyword">const</span> wsServer <span class="token operator">=</span> <span class="token punctuation">(</span>hmr <span class="token operator">&amp;&amp;</span> hmr<span class="token punctuation">.</span>server<span class="token punctuation">)</span> <span class="token operator">||</span> server
  <span class="token comment">// 普通模式</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>wsServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    wss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">noServer</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    wsServer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;upgrade&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> socket<span class="token punctuation">,</span> head</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 监听通过vite客户端发送的websocket消息，通过HMR_HEADER区分</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;sec-websocket-protocol&#39;</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token constant">HMR_HEADER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        wss<span class="token punctuation">.</span><span class="token function">handleUpgrade</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> socket <span class="token keyword">as</span> Socket<span class="token punctuation">,</span> head<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">ws</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          wss<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> ws<span class="token punctuation">,</span> req<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 中间件模式</span>
    <span class="token comment">// vite dev server in middleware mode</span>
    wss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span>websocketServerOptions<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// 错误处理</span>
  wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">e</span><span class="token operator">:</span> Error <span class="token operator">&amp;</span> <span class="token punctuation">{</span> <span class="token literal-property property">code</span><span class="token operator">:</span> string <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// 返回</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">on</span><span class="token operator">:</span> wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>wss<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">off</span><span class="token operator">:</span> wss<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>wss<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">send</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">payload</span><span class="token operator">:</span> HMRPayload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生产环境" tabindex="-1"><a class="header-anchor" href="#生产环境" aria-hidden="true">#</a> 生产环境</h3><p>​ <code>Rollup</code>是基于<code>ESM</code>的<code>JavaScript</code>打包工具。相比于其他打包工具如<code>Webpack</code>，他总是能打出更小、更快的包。因为 <code>Rollup</code> 基于 <code>ESM</code> 模块，比 <code>Webpack</code> 和 <code>Browserify</code> 使用的 <code>CommonJS</code>模块机制更高效。<code>Rollup</code>的亮点在于同一个地方，一次性加载。能针对源码进行 <code>Tree Shaking</code>(去除那些已被定义但没被使用的代码)，以及 <code>Scope Hoisting</code> 以减小输出文件大小提升运行性能。</p><p>​ <code>Rollup</code>分为<code>build</code>（构建）阶段和<code>output generate</code>（输出生成）阶段。主要过程如下：</p><ul><li>获取入口文件的内容，包装成<code>module</code>，生成抽象语法树</li><li>对入口文件抽象语法树进行依赖解析</li><li>生成最终代码</li><li>写入目标文</li></ul><p>​ 在生产环境，由于嵌套导入会导致发送大量的网络请求，即使使用HTTP2.x（多路复用、首部压缩），在生产环境中发布未打包的ESM仍然性能低下。因此，对比在开发环境Vite使用esbuild来构建依赖，生产环境Vite则使用了更加成熟的Rollup来完成整个打包过程。因为esbuild虽然快，但针对应用级别的代码分割、CSS处理仍然不够稳定，同时也未能兼容一些未提供ESM的SDK。</p><h2 id="插件" tabindex="-1"><a class="header-anchor" href="#插件" aria-hidden="true">#</a> 插件</h2><h3 id="本质" tabindex="-1"><a class="header-anchor" href="#本质" aria-hidden="true">#</a> 本质</h3><p>插件的本质其实就是一个函数，返回了一个对象，包含name、options、resolveId等钩子</p><h4 id="常用钩子" tabindex="-1"><a class="header-anchor" href="#常用钩子" aria-hidden="true">#</a> 常用钩子</h4>`,35),k={href:"https://rollupjs.org/plugin-development/#build-hooks",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"以下钩子在服务器启动时被调用：",-1),m={href:"https://rollupjs.org/plugin-development/#options",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"options",-1),h={href:"https://rollupjs.org/plugin-development/#buildstart",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"buildStart",-1),f=n("p",null,"以下钩子会在每个传入模块请求时被调用：",-1),_={href:"https://rollupjs.org/plugin-development/#resolveid",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"resolveId",-1),w={href:"https://rollupjs.org/plugin-development/#load",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"load",-1),S={href:"https://rollupjs.org/plugin-development/#transform",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"transform",-1),E=n("p",null,"以下钩子在服务器关闭时被调用：",-1),R={href:"https://rollupjs.org/plugin-development/#buildend",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"buildEnd",-1),M={href:"https://rollupjs.org/plugin-development/#closebundle",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"closeBundle",-1),W=n("p",null,"vite独有钩子：",-1),C=n("li",null,[s("config：在解析 Vite 配置前调用。钩子接收原始用户配置（命令行选项指定的会与配置文件合并）和一个描述配置环境的变量，包含正在使用的 "),n("code",null,"mode"),s(" 和 "),n("code",null,"command"),s("。它可以返回一个将被深度合并到现有配置中的部分配置对象，或者直接改变配置（如果默认的合并不能达到预期的结果）")],-1),P=n("li",null,"configResolved：在解析 Vite 配置后调用。使用这个钩子读取和存储最终解析的配置。当插件需要根据运行的命令做一些不同的事情时，它也很有用。",-1),O={href:"https://github.com/senchalabs/connect",target:"_blank",rel:"noopener noreferrer"},I={href:"https://cn.vitejs.dev/guide/api-plugin.html#configureserver",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"configureServer",-1),N=n("code",null,"configurePreviewServer",-1),T=n("code",null,"configureServer",-1),A=n("strong",null,"之后",-1),D=n("code",null,"configurePreviewServer",-1),q=n("li",null,"transformIndexHtml：转换HTML专用钩子",-1),B=n("li",null,"handleHotUpdate：执行自定义 HMR 更新处理。钩子接收一个带有以下签名的上下文对象",-1),U=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="命名方式" tabindex="-1"><a class="header-anchor" href="#命名方式" aria-hidden="true">#</a> 命名方式</h3>`,2),$={href:"https://cn.vitejs.dev/guide/api-plugin#rollup-plugin-compatibility",target:"_blank",rel:"noopener noreferrer"},L={href:"https://rollupjs.org/plugin-development/#conventions",target:"_blank",rel:"noopener noreferrer"},F=t('<ul><li>Rollup 插件应该有一个带 <code>rollup-plugin-</code> 前缀、语义清晰的名称。</li><li>在 package.json 中包含 <code>rollup-plugin</code> 和 <code>vite-plugin</code> 关键字。</li></ul><p>对于 Vite 专属的插件：</p><ul><li>Vite 插件应该有一个带 <code>vite-plugin-</code> 前缀、语义清晰的名称。</li><li>在 package.json 中包含 <code>vite-plugin</code> 关键字。</li><li>在插件文档增加一部分关于为什么本插件是一个 Vite 专属插件的详细说明（如，本插件使用了 Vite 特有的插件钩子）。</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div>',4);function G(K,z){const a=o("ExternalLinkIcon");return l(),c("div",null,[u,i(" more "),d,n("p",null,[s("在开发中，Vite 开发服务器会创建一个插件容器来调用 "),n("a",k,[s("Rollup 构建钩子"),e(a)]),s("，与 Rollup 如出一辙。")]),v,n("ul",null,[n("li",null,[n("a",m,[b,e(a)])]),n("li",null,[n("a",h,[g,e(a)])])]),f,n("ul",null,[n("li",null,[n("a",_,[y,e(a)])]),n("li",null,[n("a",w,[x,e(a)])]),n("li",null,[n("a",S,[j,e(a)])])]),E,n("ul",null,[n("li",null,[n("a",R,[V,e(a)])]),n("li",null,[n("a",M,[H,e(a)])])]),W,n("ul",null,[C,P,n("li",null,[s("configureServer：是用于配置开发服务器的钩子。最常见的用例是在内部 "),n("a",O,[s("connect"),e(a)]),s(" 应用程序中添加自定义中间件:")]),n("li",null,[s("configurePreviewServer：与 "),n("a",I,[J,e(a)]),s(" 相同，但用于预览服务器。"),N,s(" 这个钩子与 "),T,s(" 类似，也是在其他中间件安装前被调用。如果你想要在其他中间件 "),A,s(" 安装一个插件，你可以从 "),D,s(" 返回一个函数，它将会在内部中间件被安装之后再调用")]),q,B]),U,n("p",null,[s("如果插件不使用 Vite 特有的钩子，可以作为 "),n("a",$,[s("兼容 Rollup 的插件"),e(a)]),s(" 来实现，推荐使用 "),n("a",L,[s("Rollup 插件名称约定"),e(a)]),s("。")]),F])}const Y=p(r,[["render",G],["__file","vite.html.vue"]]);export{Y as default};
